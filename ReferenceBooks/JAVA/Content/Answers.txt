Одной из основных особенностей Java является то, что данный язык является строго типизированным. Это значит, что каждая переменная и константа представляет определенный тип и данный тип строго определен. Тип данных определяет диапазон значений, которые может хранить переменная или константа и размер, который он занимает в памяти. Типы данных в Java делятся на примитивные и ссылочные. Примитивные типы у себя внутри хранят значение, а ссылочные – ссылку на объект. В Java есть 8 примитивных типов
Типы данных: boolean хранит значение true или false и занимает 4 байта в стандартной реализации JVM; byte хранит целое число от -128 до 127 и занимает 1 байт; short хранит целое число от -32 768 до 32 767 и занимает 2 байта; int хранит целое число от -2 147 483 648 до 2 147 483 647 и занимает 4 байта; long хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт; float хранит число с плавающей точкой от -3.4*10^38 до 3.4*10^38 и занимает 4 байта; double хранит число с плавающей точкой от -1.7976931348623157*10^308 до 1.7976931348623157*10^308 и занимает 8 байт; char хранит одиночный символ в кодировке UTF-16 и занимает 2 байта, диапазон хранимых значений от 0 до 65 535
В Java существует 2 типа преобразований: автоматическое преобразование (неявное) и приведение типов (явное). Если "положить" в больший тип содержимое меньшего типа, происходит автоматическое преобразование. Пример автоматического преобразования: byte a = 15; int b = a. Если необходимо "положить" в меньший тип содержимое большего типа, нужно воспользоваться приведением типов. Пример приведения типов: int a = 0; long b = 15; a = (int) b. При приведении float или double к целочисленным типам, дробная часть не округляется, а просто отбрасывается. Тип boolean не приводится ни к одному из типов. Тип char приводится к числовым типам, как код символа в кодировке UTF-16. Если число больше своего контейнера, результат будет непредсказуемым
Литералы - это явно заданные значения в коде программы. Литералы делятся на числовые (целочисленные и с плавающей точкой), строковые, символьные и логические. Примеры литералов: целочисленные литералы типа int: в десятичной системе счисления: 15; в двоичной системе счисления: 0b1101010110; в восьмеричной системе счисления: 056; в шестнадцатеричной системе счисления: 0x3F; целочисленный литерал типа long в десятичной системе счисления: 4294967296L (или l); литералы с плавающей точкой: типа double в классическом виде: 2.718; типа double в научном виде: 4.05E-13; типа float в классическом виде: 2.718F (или f); типа float в научном виде: 4.05E-13F; строковый литерал типа String: "Привет"; символьные литералы типа char: в явном виде 'a', '%' или можно вывести нужный символ, используя его восьмеричное или шестнадцатиричное значение в соответствии с кодировкой UTF-16. Например '\143' для ввода восьмиричного значения или '\u0061' для ввода шестнадцатиричного значения
Существуют также символы, которые следует экранировать обратным слешем (\). Например, чтобы вывести сам символ одинарной кавычки, нужно использовать вариант '\''. Такие символы называются escape-последовательностями. Список действующих escape-последовательностей: '\t' - символ табуляции (в Java - эквивалент четырех пробелов); '\b' - символ возврата в тексте на один шаг назад или удаление одного символа в строке (backspace); '\n' - символ перехода на новую строку; '\r' - символ возврата каретки; '\f' - прогон страницы к началу следующей страницы; '\'' - символ одинарной кавычки; '\"' - символ двойной кавычки; '\\' - символ обратного слеша. Логических литералов только два: true и false. Единственный литерал, который не относится к предыдущим и связанный с объектом - это null
Переменная представляет именованную область памяти, которая хранит значение определенного типа. Каждая переменная имеет тип, имя и значение. Тип определяет, какую информацию может хранить переменная или диапазон допустимых значений. Переменные объявляются следующим образом: int x; или int y = 5;. Присвоение значения переменной: x = 20;. Начиная с Java 10 в язык было добавлено ключевое слово var, которое также позволяет определять переменную. Слово var ставится вместо типа данных, а сам тип переменной выводится из того значения, которое ей присваивается. Например, переменной x присваивается число 10, значит, переменная будет представлять тип int: var x = 10;
Идентификаторы служат для именования пакетов, классов, интерфейсов, методов, переменных и других элементов. Идентификатором может быть любая последовательность маленьких и больших букв, цифр или символов подчеркивания ( _ ) и денежной единицы ( $ ). Идентификаторы не должны начинаться с цифры. В Java учитывается регистр символов. Допустимые идентификаторы: MinTemp, sum, x4, $test, my_number. Недопустимые идентификаторы: 3min, min-temp, yes/no. Нельзя использовать ключевые слова в качестве идентификаторов
Кроме переменных, в Java для хранения данных можно использовать константы. В отличие от переменных константам можно присвоить значение только один раз. Константа объявляется также, как и переменная, только вначале идет ключевое слово final: final int LIMIT = 5;. Как правило, константы имеют имена в верхнем регистре. Константы позволяют задать такие переменные, которые не должны больше изменяться. Например, если у нас есть переменная для хранения числа pi, то мы можем объявить ее константой, так как ее значение постоянно: final double PI = 3.14;
В Java 53 ключевых слова: abstract - абстрактный метод, абстрактный класс; assert - отладка программы; boolean - булев тип; break - оператор для выхода из цикла или оператора switch; byte - целочисленный тип; case - переключатель оператора switch; catch - оператор обработки исключений; char - символьный тип; class - класс; const; continue - прекращение итерации цикла; default - ветвь оператора switch, метод по умолчанию; do - оператор цикла do/while; double - тип числа с плавающей точкой; else - оператор принятия решений; enum - перечисление; extends - родитель класса; final - класс, который нельзя расширить, метод, который нельзя переопределить или завершённый член данных; finally - оператор обработки исключений; float - тип числа с плавающей точкой; for - тип цикла; goto; if - оператор принятия решений; implements - интерфейсы, реализуемые классом; import - импорт пакета; instaceof - является ли объект экземпляром класса; int - целочисленный тип; interface - интерфейс; long - целочисленный тип; module - модуль
native - метод с кодом, написанным на другом языке; new - выделение памяти для нового массива или объекта; package - пакет классов; private - модификатор доступа; protected - модификатор доступа; public - модификатор доступа; requires - для перечисления модулей, которые необходимы для работы другому модулю; return - выход из метода и возвращение значения; short - целочисленный тип; static - переменная или метод, общий для всех экземпляров класса; strictfp - строгие правила для вычислений с плавающей точкой; super - объект или конструктор суперкласса; switch - оператор управления выполнения программы; synchronized - доступ к участку кода только одному потоку; this - неявный аргумент метода или конструктора класса; throw - оператор обработки исключений; throws - оператор обработки исключений; transient - данные, которые не должны быть постоянными; try - оператор обработки исключений; var - объявление переменной с автовыведением типа; void - метод не возвращает значений; volatile - поле доступно нескольким потокам; while - тип цикла. Ключевые слова const и goto не используются
Оператор присваивания = имеет следующую общую форму: переменная = операнд;. Переменная и операнд должны иметь совместимый тип. Есть возможность объединять присваивания в цепочки: переменная1 = переменная2 = переменная3 = операнд;. Например: int x; x = 5; int y, z, c; y = z = c = x; // y = z = c = x = 5
Операторы, которые осуществляют операции над одним операндом, называются унарными. Например, унарный минус (-). Операторы, которые осуществляют операции над двумя операндами, называются бинарными. Например, сложение двух чисел (+)
Бинарные: сложение +: int a = 4 + 7; char c = 'n' + 1; String str = "ABC" + 123; вычитание -: int c = 14 - 7; char c = 'n' - 1; умножение *: int c = 11 * 5; деление /: int c = 16 / 7; // 2; double d = 6.2 / 5; // 1.24. Опрератор деления по модулю % возвращает остаток от деления первого числа на второе: int c = 33 % 5; // 3; double b = 6.2 % 5; // 1.2. Унарные: унарный минус -: int d = - 5; int c = - d; // c = 5; префиксный инкремент ++: int a = 8; int b = ++a; // b = 9. Вначале значение переменной a увеличивается на 1, а затем ее значение присваивается переменной b. Постфиксный инкремент ++: int a = 8; int b = a++; // b = 8. Вначале значение переменной a присваивается переменной b, а потом значение переменной a увеличивается на 1. Аналогично двум инскрементам существуют префиксный и постфиксный декременты --
Результатом выполнения операторов сравнения является логическое значение. Чаще всего операторы сравнения применяются в выражениях, управляющих условным оператором if и различными операторами цикла. Существующие операторы сравнения Java: больше >; меньше <; больше или равно >=; меньше или равно <=; равно ==; неравно !=. Например: boolean c = 6 < 1; // c = false
Выполняются только с операндами типа boolean. Бинарные: конъюнкция (И, AND) &: результат будет true, только если оба значения равны true: boolean a = true; boolean b = false; boolean c = a & b; // c = false; дизъюнкция (ИЛИ, OR) |: результат будет true, если хотя бы одно из двух значений равно true: boolean a = true; boolean b = false; boolean c = a | b; // c = true; исключающее ИЛИ (XOR) ^: результат будет true, если только одно из двух значений равно true: boolean a = true; boolean b = true; boolean c = a ^ b; // c = false; сокращенные конъюнкция && и дизъюнкция ||: правый операнд вычисляется только в том случае, если от него зависит результат всей операции; унарный: инвертирование значения (НЕ, NOT) !: если значение было true, то станет false, и наоборот: boolean b1 = !true; // b1 = false
Бинарные: побитовая конъюнкция (И, AND) &: результирующий бит будет равен 1, если соответствующие биты в обоих операндах также равны 1: int a = 0b01 & 0b10; // a = 0; побитовая дизъюнкция (ИЛИ, OR) |: результирующий бит будет равен 1, если соответствующий бит в любом из операндов также равен 1: int a = 0b01 | 0b10; // a = 3; побитовое исключающее ИЛИ (XOR) ^: результирующий бит будет равен 1, если соответствующий бит только в одном из операндов равен 1: int a = 0b11 ^ 0b10; // a = 1; сдвиг влево <<: int a = - 1 << 1; // a = - 2; сдвиг вправо >>: int a = - 1 >> 1; // a = - 1; сдвиг вправо с заполнением нулями >>>: int a = - 1 >>> 1; // a = 2 147 483 647. При сдвиге отрицательных чисел имеется разница в использовании операторов >> и >>>. Оператор >> распространяет знаковый (левый) бит направо до конца, >>> заполняет нулями. У положительных чисел результат будет одинаков. Унарный: побитовое инвертирование значения (НЕ, NOT) ~: инвертирует все биты операнда: int a = ~ 1; // a = - 2
В Java имеются специальные операторы, которые являются объединением арифметического, логического или побитового оператора и оператора присваивания. Например вместо а = а + 4; можно записать а += 4;. Можно также использовать следующие специальные опреаторы: -=, *=, /=, %=, &=, |=, ^=, <<=, >>=, >>>=
Приоритеты операторов